import itertools
import os
import shutil
import time
from dataclasses import dataclass

import requests
from PIL import Image


@dataclass
class Tile:
    x: int
    y: int
    filename: str
    fileurl: str


def tiles_info(panoid: str) -> list[Tile]:
    """
    Generate a list of a panorama's tiles and their position.

    The format is (x, y, filename, fileurl)
    """

    image_url = (
        "https://cbk0.google.com/cbk?output=tile&panoid={0:}&zoom=5&x={1:}&y={2:}"
    )

    # The tiles positions
    coord = list(itertools.product(range(26), range(13)))

    tiles = [
        Tile(
            x=x,
            y=y,
            filename="%s_%dx%d.jpg" % (panoid, x, y),
            fileurl=image_url.format(panoid, x, y),
        )
        for x, y in coord
    ]

    return tiles


def download_tiles(tiles: list[Tile], directory: str, disp: bool = False) -> None:
    """
    Downloads all the tiles in a Google Stree View panorama into a directory.

    Params:
        tiles - the list of tiles. This is generated by tiles_info(panoid).
        directory - the directory to dump the tiles to.
    """

    for i, tile in enumerate(tiles):
        if disp and i % 20 == 0:
            print("Image %d (%d)" % (i, len(tiles)))

        # Try to download the image file
        while True:
            try:
                response = requests.get(tile.fileurl, stream=True)
                break
            except requests.ConnectionError:
                print("Connection error. Trying again in 2 seconds.")
                time.sleep(2)

        with open(directory + "/" + tile.filename, "wb") as out_file:
            shutil.copyfileobj(response.raw, out_file)
        del response


def stich_tiles(
    panoid: str, tiles: list[Tile], directory: str, final_directory: str
) -> None:
    """
    Stiches all the tiles of a panorama together. The tiles are located in
    `directory'.
    """

    tile_width = 512
    tile_height = 512

    panorama = Image.new("RGB", (26 * tile_width, 13 * tile_height))

    for tile in tiles:
        fname = directory + "/" + tile.filename
        img = Image.open(fname)

        panorama.paste(im=img, box=(tile.x * tile_width, tile.y * tile_height))

        del img

    panorama.save(final_directory + ("/%s.jpg" % panoid))
    del panorama


def delete_tiles(tiles: list[Tile], directory: str) -> None:
    for tile in tiles:
        os.remove(directory + "/" + tile.filename)
